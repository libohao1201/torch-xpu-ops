name: Torch XPU Windows Tests

on:
    schedule:
        # GMT+8 21:00 every workday
        - cron: '0 14 * * 0-4'
        # GMT+8 0:00 Saturday
        - cron: '0 17 * * 5'
    workflow_dispatch:
        inputs:
            gha-runner-test:
                type: choice
                description: 'Choose the GHA runner for testing'
                required: true
                options: 
                - 'windows-2022'
                - 'lnl_138'
                - 'mtl_165_11'
            pytorch:
                required: false
                type: string
                default: 'main'
                description: Pytorch branch/commit
            pytorch_wheel:
                required: false
                type: string
                default: "pip install torch==2.7.0 --index-url https://download.pytorch.org/whl/test/xpu"
                description: Pytorch installation command
            ut:
                required: false
                type: string
                default: 'torch_xpu'
                description: UT scope. `op_regression,op_regression_dev1,op_extended,op_ut,torch_xpu`. Delimiter is comma
            suite:
                required: true
                type: string
                default: 'huggingface'
                description: Dynamo benchmarks test suite. `huggingface,timm_models,torchbench`. Delimiter is comma
            dt:
                required: true
                type: string
                default: 'float32'
                description: Data precision of the test. `float32,bfloat16,float16,amp_bf16,amp_fp16`. Delimiter is comma
            mode:
                required: true
                type: string
                default: 'inference'
                description: Test mode. `inference,training`. Delimiter is comma
            scenario:
                required: true
                type: string
                default: 'accuracy'
                description: Test scenario. `accuracy,performance`. Delimiter is comma
            model:
                required: false
                type: string
                default: ''
                description: Model. Will only run this one mode if set

permissions: read-all

concurrency:
    group: ${{ github.workflow }}-${{ github.sha }}-${{ github.event_name }}-${{ inputs.pytorch }}-${{ inputs.ut }}-${{ inputs.suite }}-${{ inputs.dt }}-${{ inputs.mode }}-${{ inputs.scenario }}-${{ inputs.model }}
    cancel-in-progress: true


jobs:
    Torch-XPU-Windows-Build:
        if: ${{ inputs.pytorch != ''  ||  ! cancelled() }}
        name: windows-build-ondemand
        uses: ./.github/workflows/_windows_build.yml
        with:
            pytorch: ${{ inputs.pytorch }}
            keep_torch_xpu_ops: 'true'
            python: '3.10'
            runner: ${{ inputs.gha-runner-test }}
            xpu_version: ''
    Windows-UT-WHL-Tests:
        if: ${{ inputs.ut != '' }}
        uses: ./.github/workflows/_windows_ut.yml
        with:
            pytorch: ${{ inputs.pytorch }}
            pytorch_wheel: ${{ inputs.pytorch_wheel }}
            keep_torch_xpu_ops: 'true'
            ut: ${{ inputs.ut }}
            python: '3.10'
            runner: ${{ inputs.gha-runner-test }}
        # runs-on: ${{ inputs.gha-runner-test }}

    Windows-E2E-Tests:
        if: ${{ inputs.suite != '' }}
        timeout-minutes: 3600
        env:
            pytorch: ${{ inputs.pytorch }}
            pytorch_wheel: ${{ inputs.pytorch_wheel }}
            keep_torch_xpu_ops: 'true'
            suite: ${{ inputs.suite }}
            dt: ${{ inputs.dt }}
            mode: ${{ inputs.mode }}
            scenario: ${{ inputs.scenario }}
            model: ${{ inputs.model }}
            python: '3.10'
            # runner: ${{ inputs.gha-runner-test }}
        outputs:
            TORCH_BRANCH_ID: ${{ steps.installed.outputs.TORCH_BRANCH_ID }}
            TORCH_COMMIT_ID: ${{ steps.installed.outputs.TORCH_COMMIT_ID }}
            TORCH_XPU_OPS_COMMIT: ${{ steps.installed.outputs.TORCH_XPU_OPS_COMMIT }}
            # TORCHBENCH_COMMIT_ID: ${{ steps.pinned.outputs.TORCHBENCH_COMMIT_ID }}
            # TORCHVISION_COMMIT_ID: ${{ steps.pinned.outputs.TORCHVISION_COMMIT_ID }}
            # TORCHAUDIO_COMMIT_ID: ${{ steps.pinned.outputs.TORCHAUDIO_COMMIT_ID }}
            # TRANSFORMERS_VERSION: ${{ steps.pinned.outputs.TRANSFORMERS_VERSION }}
            # TIMM_COMMIT_ID: ${{ steps.pinned.outputs.TIMM_COMMIT_ID }}
            # TRITON_COMMIT_ID: ${{ steps.pinned.outputs.TRITON_COMMIT_ID }}
            # DRIVER_VERSION: ${{ steps.pinned.outputs.DRIVER_VERSION }}
            # KERNEL_VERSION: ${{ steps.pinned.outputs.KERNEL_VERSION }}
            # BUNDLE_VERSION: ${{ steps.pinned.outputs.BUNDLE_VERSION }}
            # OS_PRETTY_NAME: ${{ steps.pinned.outputs.OS_PRETTY_NAME }}
            # GCC_VERSION: ${{ steps.pinned.outputs.GCC_VERSION }}
            # TIMEOUT_MODELS: ${{ steps.summary.outputs.TIMEOUT_MODELS }}
        runs-on: ${{ inputs.gha-runner-test }}
        steps:
            - name: Checkout torch-xpu-ops
              uses: actions/checkout@v4

            - name: Set runner environment variable
              run: echo "runner=${{ inputs.gha-runner-test }}" >> $GITHUB_ENV

            - name: Prepare Conda ENV
              id: installed
              run: |
                    echo "current path is: ${{ github.workspace }}"
                    call which conda
                    conda clean -ay
                    if exist "%CONDA_EXE%\..\..\envs\e2e_ci" (
                        echo "e2e_ci exists, remove it!"
                        conda remove --all -y -n e2e_ci || rmdir %CONDA_EXE%\..\..\envs\e2e_ci
                    )
                    
                    if "%runner%" == "windows-2022" (
                        call conda install -y -c intel oneapi-setvars
                    )
                    

                   
                    if "%pytorch_wheel%" NEQ "" (
                        echo "Using pytorch wheel from %pytorch_wheel%"
                        pip install %pytorch_wheel%
                    ) else if "%pytorch%" NEQ "" (
                        echo "Using pytorch branch/commit from %pytorch%"
                        pip install git+https://github.com/pytorch/pytorch.git@%pytorch%
                    ) else (
                        echo "No pytorch installation method provided."
                    )
                    
                    for /f "delims=" %i in ('python -c "import torch; print(torch.version.git_version)"') do set pytorch_commit_id=%i
                    echo PyTorch commit id: %pytorch_commit_id%   
                    
                    git clone https://github.com/pytorch/pytorch.git
                    cd pytorch
                    git checkout %pytorch_version% 
                    git status 
                    git show -s
                    pip install -r requirements.txt


                    cd pytorch/third_party
                    set /P TORCH_XPU_OPS_COMMIT=<xpu.txt
                    git clone https://github.com/intel/torch-xpu-ops.git
                    cd torch-xpu-ops
                    git checkout %TORCH_XPU_OPS_COMMIT%
                    git status 
                    git show -s

