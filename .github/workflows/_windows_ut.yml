name: Windows Test

on:
  workflow_call:
    inputs:
      pytorch:
        required: false
        type: string
        default: 'main'
        description: Pytorch branch/commit
      pytorch_wheel:
        required: false
        type: string
        default: "pip install torch==2.7.0 --index-url https://download.pytorch.org/whl/test/xpu"
        description: Pytorch installation command
      keep_torch_xpu_ops:
        required: false
        type: string
        default: 'false'
        description: Keep torch-xpu-ops pin. `true` means use pined commit
      ut:
        required: true
        type: string
        default: ''
        description: UT scope. `op_regression,op_regression_dev1,op_extended,op_ut,torch_xpu` Delimiter is comma
      python:
        required: false
        type: string
        default: '3.10'
        description: Python version
      runner:
        required: true
        type: string
        default: 'xpu_op_ut'
        description: Runner label
      xpu_version:
        required: false
        type: string
        default: '2025.0'
        description: Python version

permissions: read-all

env: 
    USE_XPU: 1

jobs:
  Torch-XPU-Windows-UT:
    runs-on: ${{ inputs.runner }}
    timeout-minutes: 900
    steps:
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
      - name: Prepare conda env
        shell: cmd
        run: |
          echo "C:\ProgramData\miniforge3\Scripts" >> "$GITHUB_PATH"
          echo "C:\ProgramData\miniforge3\Library\bin" >> "$GITHUB_PATH"
          call "C:\ProgramData\miniforge3\Scripts\activate.bat"
          call conda clean -ay
          call conda remove --all -y -n xpu_op_ut
          call conda create -n xpu_op_ut python=3.10 cmake ninja -y
          call conda activate xpu_op_ut
          
      - name: Install Pytorch XPU
        if: ${{ inputs.pytorch != '' }} || ${{ inputs.pytorch_wheel != ''}} || ${{ ! cancelled() }}
        shell: cmd
        run: |
          cd ..
          cd pytorch
          
          pip install pyyaml requests
          call conda install -y libuv
          call conda install -y rust 
          git status 
          git show -s 

          call conda activate xpu_op_ut
          cd ../pytorch

          if "%inputs.pytorch%" NEQ "" (
            pip install dist\torch-*.whl
          ) else if "%inputs.pytorch_wheel%" NEQ "" (
            %inputs.pytorch_wheel%
          )
          
          call conda list | findstr torch > torch_list.log
          type torch_list.log
          


          pip install -r requirements.txt
          pip install -r .ci\docker\requirements-ci.txt


      - name: Torch Config
        shell: cmd
        run: |
          call "C:\ProgramData\miniforge3\Scripts\activate.bat"
          call conda activate xpu_op_ut
          call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
          python -c "import torch; print(torch.__config__.show())"
          python -c "import torch; print(torch.__config__.parallel_info())"
          python -c "import torch; print(torch.__config__.torch.xpu.device_count())"

      - name: Upload torch installation log
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: Torch-XPU-Windows-Log-${{ github.event.pull_request.number || github.sha }}
          path: 'C:\actions-runner\_work\torch-xpu-ops\pytorch\torch_list.log'

      - name: Run XPU OP Extended UT
        if: contains(inputs.ut, 'op_extended') || github.event_name == 'schedule'
        shell: cmd
        run: |
          call "C:\ProgramData\miniforge3\Scripts\activate.bat"
          call conda activate xpu_op_ut
          call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
          set PYTORCH_TEST_WITH_SLOW=1
          cd ../pytorch/third_party/torch-xpu-ops/test/xpu/extended/
          python run_test_with_skip_mtl.py
